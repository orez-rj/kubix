name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  check_version:
    name: Check for version change
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.check.outputs.changed }}
      new_version: ${{ steps.extract.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Need at least 2 commits to compare

      - name: Check if version changed
        id: check
        run: |
          # Get the version from current Cargo.toml
          CURRENT_VERSION=$(grep '^version = ' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
          
          # Get the version from previous commit
          git checkout HEAD~1 -- Cargo.toml 2>/dev/null || echo "No previous Cargo.toml"
          if [ -f Cargo.toml ]; then
            PREVIOUS_VERSION=$(grep '^version = ' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
          else
            PREVIOUS_VERSION=""
          fi
          
          # Restore current Cargo.toml
          git checkout HEAD -- Cargo.toml
          
          echo "Previous version: $PREVIOUS_VERSION"
          echo "Current version: $CURRENT_VERSION"
          
          if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ] && [ -n "$CURRENT_VERSION" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Version changed from $PREVIOUS_VERSION to $CURRENT_VERSION"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "Version unchanged"
          fi

      - name: Extract version
        id: extract
        if: steps.check.outputs.changed == 'true' || github.event_name == 'workflow_dispatch'
        run: |
          VERSION=$(grep '^version = ' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
          echo "version=v$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: v$VERSION"

  build:
    name: Build - ${{ matrix.platform.release_for }}
    needs: check_version
    if: needs.check_version.outputs.version_changed == 'true' || github.event_name == 'workflow_dispatch'
    concurrency:
      group: release-${{ github.ref }}-${{ matrix.platform.target }}
      cancel-in-progress: true
    strategy:
      fail-fast: false
      matrix:
        platform:
          - release_for: Linux-x86_64-gnu
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            bin: kubix
            archive_name: kubix-Linux-x86_64-gnu.tar.gz

          - release_for: Linux-x86_64-musl
            os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            bin: kubix
            archive_name: kubix-Linux-x86_64-musl.tar.gz

          - release_for: Windows-x86_64
            os: windows-latest
            target: x86_64-pc-windows-msvc
            bin: kubix.exe
            archive_name: kubix-Windows-x86_64.zip

          - release_for: macOS-x86_64
            os: macOS-latest
            target: x86_64-apple-darwin
            bin: kubix
            archive_name: kubix-Darwin-x86_64.tar.gz

          - release_for: macOS-arm64
            os: macOS-latest
            target: aarch64-apple-darwin
            bin: kubix
            archive_name: kubix-Darwin-arm64.tar.gz

    runs-on: ${{ matrix.platform.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Build binary
        uses: houseabsolute/actions-rust-cross@v0
        with:
          command: build
          target: ${{ matrix.platform.target }}
          args: "--locked --release"
          strip: true

      - name: Sanity check binary
        run: |
          target/${{ matrix.platform.target }}/release/${{ matrix.platform.bin }} --version
        shell: bash

      - name: Package binary & generate checksum
        shell: bash
        run: |
          cd target/${{ matrix.platform.target }}/release
          if [[ "${{ matrix.platform.os }}" == "windows-latest" ]]; then
            7z a "../../../${{ matrix.platform.archive_name }}" "${{ matrix.platform.bin }}"
          else
            tar -czvf "../../../${{ matrix.platform.archive_name }}" "${{ matrix.platform.bin }}"
          fi
          cd ../../..
          if [[ "${{ matrix.platform.os }}" == "windows-latest" ]]; then
            # Use PowerShell to generate SHA256 hash in the same format as shasum
            powershell -Command "(Get-FileHash '${{ matrix.platform.archive_name }}' -Algorithm SHA256).Hash.ToLower() + '  ${{ matrix.platform.archive_name }}'" > "${{ matrix.platform.archive_name }}.sha256"
          else
            shasum -a 256 "${{ matrix.platform.archive_name }}" > "${{ matrix.platform.archive_name }}.sha256"
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.archive_name }}
          path: |
            ${{ matrix.platform.archive_name }}
            ${{ matrix.platform.archive_name }}.sha256
          if-no-files-found: error
          retention-days: 14

  github_release:
    name: Create GitHub Release
    needs: [check_version, build]
    if: needs.check_version.outputs.version_changed == 'true' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Create and push tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Check if tag already exists
          if git rev-parse "${{ needs.check_version.outputs.new_version }}" >/dev/null 2>&1; then
            echo "Tag ${{ needs.check_version.outputs.new_version }} already exists, skipping tag creation"
          else
            git tag ${{ needs.check_version.outputs.new_version }}
            git push origin ${{ needs.check_version.outputs.new_version }}
            echo "Created and pushed tag ${{ needs.check_version.outputs.new_version }}"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.check_version.outputs.new_version }}
          name: Kubix ${{ needs.check_version.outputs.new_version }}
          generate_release_notes: true
          body: |
            ## Kubix ${{ needs.check_version.outputs.new_version }}

            Smart kubectl wrapper with extra superâ€‘powers.

            Download, `tar -xzf` / `unzip`, move the binary to your `$PATH`, and run:

            ```bash
            kubix --help
            ```
          files: |
            artifacts/**/*.tar.gz
            artifacts/**/*.zip
            artifacts/**/*.sha256
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
