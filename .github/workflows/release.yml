name: Release

on:
  push:
    tags:
      - 'v*'          # build & release only when pushing version tags like v1.2.3
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build - ${{ matrix.platform.release_for }}
    concurrency:
      group: release-${{ github.ref }}-${{ matrix.platform.target }}
      cancel-in-progress: true
    strategy:
      fail-fast: false
      matrix:
        include:
          - release_for: Linux-x86_64-gnu
            os: ubuntu-20.04
            target: x86_64-unknown-linux-gnu
            bin: kubix
            archive_name: kubix-Linux-x86_64-gnu.tar.gz
            use_cross: true

          - release_for: Linux-x86_64-musl
            os: ubuntu-20.04
            target: x86_64-unknown-linux-musl
            bin: kubix
            archive_name: kubix-Linux-x86_64-musl.tar.gz
            use_cross: true

          - release_for: Windows-x86_64
            os: windows-latest
            target: x86_64-pc-windows-msvc
            bin: kubix.exe
            archive_name: kubix-Windows-x86_64.zip
            use_cross: false

          - release_for: macOS-x86_64
            os: macOS-latest
            target: x86_64-apple-darwin
            bin: kubix
            archive_name: kubix-Darwin-x86_64.tar.gz
            use_cross: false

          - release_for: macOS-arm64
            os: macOS-latest
            target: aarch64-apple-darwin
            bin: kubix
            archive_name: kubix-Darwin-arm64.tar.gz
            use_cross: false

    runs-on: ${{ matrix.platform.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Build binary
        uses: houseabsolute/actions-rust-cross@v0
        with:
          command: build
          target: ${{ matrix.platform.target }}
          args: "--locked --release"
          strip: true
          use-cross: ${{ matrix.platform.use_cross }}
          cache: true
          cache-key: ${{ matrix.platform.target }}

      - name: Sanity check binary
        run: |
          target/${{ matrix.platform.target }}/release/${{ matrix.platform.bin }} --version
        shell: bash

      - name: Package binary & generate checksum
        shell: bash
        run: |
          cd target/${{ matrix.platform.target }}/release
          ARCHIVE=../../../${{ matrix.platform.archive_name }}
          if [[ "${{ matrix.platform.os }}" == "windows-latest" ]]; then
            7z a "$ARCHIVE" "${{ matrix.platform.bin }}"
          else
            tar -czvf "$ARCHIVE" "${{ matrix.platform.bin }}"
          fi
          cd -
          shasum -a 256 "$ARCHIVE" > "$ARCHIVE".sha256

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.archive_name }}
          path: |
            ${{ matrix.platform.archive_name }}
            ${{ matrix.platform.archive_name }}.sha256
          if-no-files-found: error
          retention-days: 14

  github_release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Extract version from tag
        id: vars
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.vars.outputs.version }}
          name: Kubix ${{ steps.vars.outputs.version }}
          generate_release_notes: true
          body: |
            ## Kubix ${{ steps.vars.outputs.version }}

            Smart kubectl wrapper with extra superâ€‘powers.

            Download, `tar -xzf` / `unzip`, move the binary to your `$PATH`, and run:

            ```bash
            kubix --help
            ```
          files: |
            artifacts/**/*.{tar.gz,zip,sha256}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
